# Generated by Django 4.1 on 2022-09-02 14:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="LoyaltyCard",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("store", models.CharField(max_length=512, verbose_name="Name")),
                ("note", models.TextField(verbose_name="Notes")),
                ("expiracy", models.DateField(verbose_name="Expires on")),
                (
                    "balance",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="Balance"
                    ),
                ),
                (
                    "balance_currency",
                    models.CharField(
                        help_text="Currency 3-letter symbol, ISO 4217",
                        max_length=3,
                        verbose_name="Balance currency",
                    ),
                ),
                ("card_id", models.TextField(verbose_name="Card ID")),
                (
                    "barcode_id_raw",
                    models.TextField(
                        blank=True,
                        help_text="Leave blank to reuse card ID",
                        null=True,
                        verbose_name="Barcode ID",
                    ),
                ),
                (
                    "barcode_type",
                    models.CharField(
                        choices=[
                            ("AZTEC", "Aztec"),
                            ("C39", "Code 39"),
                            ("C93", "Code 93"),
                            ("C128", "Code 128"),
                            ("CODABAR", "Codabar"),
                            ("DM", "Data Matrix"),
                            ("EAN8", "EAN 8"),
                            ("EAN13", "EAN 13"),
                            ("ITF", "ITF"),
                            ("PDF417", "PDF 417"),
                            ("QRCODE", "QR Code"),
                            ("UPCA", "UPC A"),
                            ("UPCE", "UPC E"),
                        ],
                        max_length=7,
                        verbose_name="Barcode type",
                    ),
                ),
                (
                    "header_color_raw",
                    models.PositiveIntegerField(
                        help_text="RGB color, 0xRRGGBB",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(16777215),
                        ],
                        verbose_name="Header color",
                    ),
                ),
                (
                    "star_status",
                    models.BooleanField(default=False, verbose_name="Starred"),
                ),
                (
                    "archive_status",
                    models.BooleanField(default=False, verbose_name="Archived"),
                ),
                ("last_used", models.DateTimeField(verbose_name="Last used")),
                ("zoom_level", models.PositiveIntegerField(verbose_name="Zoom level")),
                (
                    "revision_id",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Revision ID"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LoyaltyCardGroup",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Group name")),
                ("order", models.PositiveIntegerField(verbose_name="Order ID")),
                (
                    "cards",
                    models.ManyToManyField(
                        related_name="groups", to="backend.loyaltycard"
                    ),
                ),
            ],
        ),
    ]
